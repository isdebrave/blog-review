{"version":3,"file":"component---src-pages-index-tsx-acad263be2144f61f78f.js","mappings":"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","sources":["webpack://blog-review/./src/components/main/CategoryList.tsx","webpack://blog-review/./src/components/main/ProfileImage.tsx","webpack://blog-review/./src/components/main/Introduction.tsx","webpack://blog-review/./src/components/main/PostItem.tsx","webpack://blog-review/./src/hooks/useInfiniteScroll.tsx","webpack://blog-review/./src/components/main/PostList.tsx","webpack://blog-review/./node_modules/decode-uri-component/index.js","webpack://blog-review/./node_modules/split-on-first/index.js","webpack://blog-review/./node_modules/filter-obj/index.js","webpack://blog-review/./node_modules/query-string/base.js","webpack://blog-review/./node_modules/query-string/index.js","webpack://blog-review/./src/pages/index.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { GatsbyLinkProps, Link } from \"gatsby\";\nimport React from \"react\";\n\nconst CategoryListWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 768px;\n  margin: 100px auto 0;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    margin-top: 50px;\n    padding: 0 20px;\n  }\n`;\n\n/* GatsbyLinkProps로부터 추출 */\n/* type */\n// type CategoryItemLinkType = GatsbyLinkProps<string> & { active: boolean };\n\n/* interface */\n// interface ICategoryItemLink extends GatsbyLinkProps<string> {\n//   active: boolean;\n// }\n\ntype CategoryItemLink = {\n  children: React.ReactNode;\n  to: string;\n} & { active: boolean };\n\nconst CategoryItem = styled(Link)<CategoryItemLink>`\n  margin-right: 20px;\n  padding: 5px 0;\n  font-size: 18px;\n  font-weight: ${(props: CategoryItemLink) => (props.active ? \"800\" : \"400\")};\n  cursor: pointer;\n\n  &:last-of-type {\n    margin-right: 0;\n  }\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`;\n\nexport interface ICategoryList {\n  selectedCategory: string;\n  categoryList: {\n    [key: string]: number;\n  };\n}\n\nconst CategoryList: React.FC<ICategoryList> = (props) => {\n  const { selectedCategory, categoryList } = props;\n\n  return (\n    <CategoryListWrapper>\n      {Object.entries(categoryList).map(([name, count]) => (\n        <CategoryItem\n          key={name}\n          to={`/?category=${name}`}\n          active={name === selectedCategory}\n        >\n          #{name}({count})\n        </CategoryItem>\n      ))}\n    </CategoryListWrapper>\n  );\n};\n\nexport default CategoryList;\n","import styled from \"@emotion/styled\";\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\";\n\nconst ProfileImageWrapper = styled(GatsbyImage)`\n  width: 120px;\n  height: 120px;\n  margin-bottom: 30px;\n  border-radius: 50%;\n\n  @media (max-width: 768px) {\n    width: 80px;\n    height: 80px;\n  }\n`;\n\ninterface IProfileImage {\n  profileImage: IGatsbyImageData;\n}\n\nconst ProfileImage: React.FC<IProfileImage> = (props) => {\n  const { profileImage } = props;\n\n  return <ProfileImageWrapper image={profileImage} alt=\"Profile Image\" />;\n};\n\nexport default ProfileImage;\n","import styled from \"@emotion/styled\";\nimport ProfileImage from \"./ProfileImage\";\nimport { IGatsbyImageData } from \"gatsby-plugin-image\";\n\nconst Background = styled.div`\n  width: 100%;\n  background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);\n  color: #ffffff;\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  width: 768px;\n  height: 400px;\n  margin: 0 auto;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    height: 300px;\n    padding: 0 20px;\n  }\n`;\n\nconst SubTitle = styled.div`\n  font-size: 20px;\n  font-weight: 400;\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n  }\n`;\n\nconst Title = styled.div`\n  margin-top: 5px;\n  font-size: 35px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    font-size: 25px;\n  }\n`;\n\ninterface IIntroduction {\n  profileImage: IGatsbyImageData;\n}\n\nconst Introduction: React.FC<IIntroduction> = (props) => {\n  const { profileImage } = props;\n\n  return (\n    <Background>\n      <Wrapper>\n        <ProfileImage profileImage={profileImage} />\n\n        <div>\n          <SubTitle>Nice to Meet You,</SubTitle>\n          <Title>I'm Junior Frontend Developer Hyun.</Title>\n        </div>\n      </Wrapper>\n    </Background>\n  );\n};\n\nexport default Introduction;\n","import styled from \"@emotion/styled\";\nimport { Link } from \"gatsby\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\nimport React from \"react\";\nimport { PostFrontmatterType } from \"types/PostItem.types\";\n\nconst PostItemWrapper = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  border-radius: 10px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);\n  transition: 0.3s box-shadow;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n  }\n`;\n\nconst ThumbnailImage = styled(GatsbyImage)`\n  width: 100%;\n  height: 200px;\n  border-radius: 10px 10px 0 0;\n  /* object-fit: cover; */\n`;\n\nconst PostItemContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n`;\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-bottom: 3px;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 20px;\n  font-weight: 700;\n`;\n\nconst Date = styled.div`\n  font-size: 14px;\n  font-weight: 400;\n  opacity: 0.7;\n`;\n\nconst Category = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 10px;\n  margin: 10px -5px;\n`;\n\nconst CategoryItem = styled.div`\n  margin: 2.5px 5px;\n  padding: 3px 5px;\n  border-radius: 3px;\n  background: black;\n  font-size: 14px;\n  font-weight: 700;\n  color: white;\n`;\n\nconst Summary = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  overflow-wrap: break-word;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 16px;\n  opacity: 0.8;\n`;\n\ntype PostItemProps = PostFrontmatterType & {\n  link: string;\n};\n\nconst PostItem: React.FC<PostItemProps> = (props) => {\n  const {\n    title,\n    date,\n    categories,\n    summary,\n    thumbnail: {\n      childImageSharp: { gatsbyImageData },\n    },\n    link,\n  } = props;\n\n  return (\n    <PostItemWrapper to={link}>\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\n\n      <PostItemContent>\n        <Title>{title}</Title>\n        <Date>{date}</Date>\n        <Category>\n          {categories.map((category) => (\n            <CategoryItem key={category}>{category}</CategoryItem>\n          ))}\n        </Category>\n        <Summary>{summary}</Summary>\n      </PostItemContent>\n    </PostItemWrapper>\n  );\n};\n\nexport default PostItem;\n","import React, {\n  MutableRefObject,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { PostListItemType } from \"types/PostItem.types\";\n\nexport type useInfiniteScrollType = {\n  containerRef: React.RefObject<HTMLDivElement>;\n  postList: PostListItemType[];\n};\n\nconst NUMBER_OF_ITEMS_PER_PAGE = 10;\n\nconst useInfiniteScroll = (\n  selectedCategory: string,\n  posts: PostListItemType[]\n) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const observer: MutableRefObject<IntersectionObserver | null> = useRef(null);\n  const [count, setCount] = useState<number>(1);\n\n  const postListByCategory = useMemo<PostListItemType[]>(() => {\n    return posts.filter((post) => {\n      const { categories } = post.node.frontmatter;\n\n      return selectedCategory === \"All\"\n        ? true\n        : categories.includes(selectedCategory);\n    });\n  }, [selectedCategory]);\n\n  useEffect(() => {\n    observer.current = new IntersectionObserver((entries, observer) => {\n      if (!entries[0].isIntersecting) return;\n\n      setCount((value) => value + 1);\n      observer.unobserve(entries[0].target);\n    });\n  }, []);\n\n  useEffect(() => setCount(1), [selectedCategory]);\n\n  useEffect(() => {\n    if (\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\n      containerRef.current === null ||\n      containerRef.current.children.length === 0 ||\n      observer.current === null\n    ) {\n      return;\n    }\n\n    observer.current.observe(\n      containerRef.current.children[containerRef.current.children.length - 1]\n    );\n  }, [count, selectedCategory]);\n\n  return {\n    containerRef,\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\n  };\n};\n\nexport default useInfiniteScroll;\n","import styled from \"@emotion/styled\";\nimport PostItem from \"./PostItem\";\nimport { PostListItemType } from \"types/PostItem.types\";\nimport useInfiniteScroll from \"hooks/useInfiniteScroll\";\n\nconst PostListWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n  width: 768px;\n  margin: 0 auto;\n  padding: 50px 0 100px;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    width: 100%;\n    padding: 50px 20px;\n  }\n`;\n\ninterface IPostList {\n  selectedCategory: string;\n  posts: PostListItemType[];\n}\n\nconst PostList: React.FC<IPostList> = ({ selectedCategory, posts }) => {\n  const { containerRef, postList } = useInfiniteScroll(selectedCategory, posts);\n\n  return (\n    <PostListWrapper ref={containerRef}>\n      {postList.map((post) => (\n        <PostItem\n          key={post.node.id}\n          {...post.node.frontmatter}\n          link={post.node.fields.slug}\n        />\n      ))}\n    </PostListWrapper>\n  );\n};\n\nexport default PostList;\n","const token = '%[a-f0-9]{2}';\nconst singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nconst multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tconst left = components.slice(0, split);\n\tconst right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch {\n\t\tlet tokens = input.match(singleMatcher) || [];\n\n\t\tfor (let i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tconst replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD',\n\t};\n\n\tlet match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch {\n\t\t\tconst result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tconst entries = Object.keys(replaceMap);\n\n\tfor (const key of entries) {\n\t\t// Replace all decoded components\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nexport default function decodeUriComponent(encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n}\n","export default function splitOnFirst(string, separator) {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (string === '' || separator === '') {\n\t\treturn [];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n}\n","export function includeKeys(object, predicate) {\n\tconst result = {};\n\n\tif (Array.isArray(predicate)) {\n\t\tfor (const key of predicate) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor?.enumerable) {\n\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// `Reflect.ownKeys()` is required to retrieve symbol properties\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor.enumerable) {\n\t\t\t\tconst value = object[key];\n\t\t\t\tif (predicate(key, value, object)) {\n\t\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function excludeKeys(object, predicate) {\n\tif (Array.isArray(predicate)) {\n\t\tconst set = new Set(predicate);\n\t\treturn includeKeys(object, key => !set.has(key));\n\t}\n\n\treturn includeKeys(object, (key, value, object) => !predicate(key, value, object));\n}\n","import decodeComponent from 'decode-uri-component';\nimport splitOnFirst from 'split-on-first';\nimport {includeKeys} from 'filter-obj';\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\n// eslint-disable-next-line unicorn/prefer-code-point\nconst strictUriEncode = string => encodeURIComponent(string).replaceAll(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result, [encode(key, options), '[', index, ']'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), '[]'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[]=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), ':list='].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), ':list=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSeparator = options.arrayFormat === 'bracket-separator'\n\t\t\t\t? '[]='\n\t\t\t\t: '=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSeparator, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\tencode(key, options),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : (value === null ? value : decode(value, options));\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null\n\t\t\t\t\t? []\n\t\t\t\t\t: value.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], ...arrayValue];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...[accumulator[key]].flat(), value];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nexport function extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nexport function parse(query, options) {\n\toptions = {\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false,\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst returnValue = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn returnValue;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn returnValue;\n\t}\n\n\tfor (const parameter of query.split('&')) {\n\t\tif (parameter === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst parameter_ = options.decode ? parameter.replaceAll('+', ' ') : parameter;\n\n\t\tlet [key, value] = splitOnFirst(parameter_, '=');\n\n\t\tif (key === undefined) {\n\t\t\tkey = parameter_;\n\t\t}\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : (['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options));\n\t\tformatter(decode(key, options), value, returnValue);\n\t}\n\n\tfor (const [key, value] of Object.entries(returnValue)) {\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const [key2, value2] of Object.entries(value)) {\n\t\t\t\tvalue[key2] = parseValue(value2, options);\n\t\t\t}\n\t\t} else {\n\t\t\treturnValue[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn returnValue;\n\t}\n\n\t// TODO: Remove the use of `reduce`.\n\t// eslint-disable-next-line unicorn/no-array-reduce\n\treturn (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = returnValue[key];\n\t\tresult[key] = Boolean(value) && typeof value === 'object' && !Array.isArray(value) ? keysSorter(value) : value;\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexport function stringify(object, options) {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key]))\n\t\t|| (options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = value;\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n}\n\nexport function parseUrl(url, options) {\n\toptions = {\n\t\tdecode: true,\n\t\t...options,\n\t};\n\n\tlet [url_, hash] = splitOnFirst(url, '#');\n\n\tif (url_ === undefined) {\n\t\turl_ = url;\n\t}\n\n\treturn {\n\t\turl: url_?.split('?')?.[0] ?? '',\n\t\tquery: parse(extract(url), options),\n\t\t...(options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}),\n\t};\n}\n\nexport function stringifyUrl(object, options) {\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true,\n\t\t...options,\n\t};\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = extract(object.url);\n\n\tconst query = {\n\t\t...parse(queryFromUrl, {sort: false}),\n\t\t...object.query,\n\t};\n\n\tlet queryString = stringify(query, options);\n\tqueryString &&= `?${queryString}`;\n\n\tlet hash = getHash(object.url);\n\tif (typeof object.fragmentIdentifier === 'string') {\n\t\tconst urlObjectForFragmentEncode = new URL(url);\n\t\turlObjectForFragmentEncode.hash = object.fragmentIdentifier;\n\t\thash = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n}\n\nexport function pick(input, filter, options) {\n\toptions = {\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false,\n\t\t...options,\n\t};\n\n\tconst {url, query, fragmentIdentifier} = parseUrl(input, options);\n\n\treturn stringifyUrl({\n\t\turl,\n\t\tquery: includeKeys(query, filter),\n\t\tfragmentIdentifier,\n\t}, options);\n}\n\nexport function exclude(input, filter, options) {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn pick(input, exclusionFilter, options);\n}\n","import * as queryString from './base.js';\n\nexport default queryString;\n","import Template from \"components/common/Template\";\nimport CategoryList, { ICategoryList } from \"components/main/CategoryList\";\nimport Introduction from \"components/main/Introduction\";\nimport PostList from \"components/main/PostList\";\nimport { graphql } from \"gatsby\";\nimport { IGatsbyImageData } from \"gatsby-plugin-image\";\nimport queryString from \"query-string\";\nimport { useEffect, useState } from \"react\";\nimport { PostListItemType } from \"types/PostItem.types\";\n\ninterface IIndexPage {\n  location: {\n    search: string;\n  };\n  data: {\n    site: {\n      siteMetadata: {\n        title: string;\n        description: string;\n        siteUrl: string;\n      };\n    };\n    allMarkdownRemark: {\n      edges: PostListItemType[];\n    };\n    file: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData;\n      };\n      publicURL: string;\n    };\n  };\n}\n\nconst IndexPage: React.FC<IIndexPage> = (props) => {\n  const { search } = props.location;\n  const { title, description, siteUrl } = props.data.site.siteMetadata;\n  const { edges } = props.data.allMarkdownRemark;\n  const {\n    childImageSharp: { gatsbyImageData },\n    publicURL,\n  } = props.data.file;\n\n  const [categoryList, setCategoryList] = useState<\n    ICategoryList[\"categoryList\"]\n  >({});\n\n  const parsed = queryString.parse(search);\n  const selectedCategory =\n    typeof parsed.category !== \"string\" || !parsed.category\n      ? \"All\"\n      : parsed.category;\n\n  useEffect(() => {\n    const list: ICategoryList[\"categoryList\"] = { All: 0 };\n\n    for (const edge of edges) {\n      const categories = edge.node.frontmatter.categories;\n\n      categories.forEach((category) => {\n        if (!list[category]) {\n          list[category] = 1;\n        } else {\n          list[category]++;\n        }\n      });\n\n      list[\"All\"]++;\n    }\n\n    setCategoryList(list);\n  }, []);\n\n  return (\n    <Template\n      title={title}\n      description={description}\n      url={siteUrl}\n      image={publicURL}\n    >\n      <Introduction profileImage={gatsbyImageData} />\n      <CategoryList\n        selectedCategory={selectedCategory}\n        categoryList={categoryList}\n      />\n      <PostList selectedCategory={selectedCategory} posts={edges} />\n    </Template>\n  );\n};\n\nexport default IndexPage;\n\nexport const getPostList = graphql`\n  query getPostList {\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl\n      }\n    }\n    allMarkdownRemark(\n      sort: [{ frontmatter: { date: DESC } }, { frontmatter: { title: DESC } }]\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 768, height: 400)\n              }\n            }\n          }\n        }\n      }\n    }\n    file(name: { eq: \"profile-image\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 120, height: 120)\n      }\n    }\n  }\n`;\n"],"names":["CategoryListWrapper","CategoryItem","_styled","Link","props","active","selectedCategory","categoryList","___EmotionJSX","Object","entries","map","_ref","name","count","key","to","ProfileImageWrapper","GatsbyImage","profileImage","image","alt","Background","Wrapper","SubTitle","Title","ProfileImage","PostItemWrapper","ThumbnailImage","PostItemContent","Date","Category","Summary","title","date","categories","summary","thumbnail","childImageSharp","gatsbyImageData","link","category","posts","containerRef","useRef","observer","setCount","useState","postListByCategory","useMemo","filter","post","node","frontmatter","includes","useEffect","current","IntersectionObserver","isIntersecting","value","unobserve","target","length","children","observe","postList","slice","PostListWrapper","useInfiniteScroll","ref","PostItem","id","fields","slug","token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","left","right","Array","prototype","concat","call","decode","input","tokens","match","i","decodeUriComponent","encodedURI","TypeError","replaceMap","exec","result","keys","replace","customDecodeURIComponent","splitOnFirst","string","separator","separatorIndex","indexOf","includeKeys","object","predicate","isArray","descriptor","getOwnPropertyDescriptor","enumerable","defineProperty","Reflect","ownKeys","isNullOrUndefined","strictUriEncode","encodeURIComponent","replaceAll","x","charCodeAt","toString","toUpperCase","encodeFragmentIdentifier","Symbol","validateArrayFormatSeparator","encode","options","strict","keysSorter","sort","a","b","Number","removeHash","hashStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","toLowerCase","extract","queryStart","parse","query","arrayFormat","arrayFormatSeparator","formatter","accumulator","undefined","isEncodedArray","newValue","item","test","arrayValue","flat","parserForArrayFormat","returnValue","create","parameter","parameter_","key2","value2","reduce","Boolean","stringify","shouldFilter","skipNull","skipEmptyString","index","keyValueSeparator","encoderForArrayFormat","objectCopy","parseUrl","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryString","getHash","urlObjectForFragmentEncode","URL","pick","exclude","search","location","description","siteUrl","data","site","siteMetadata","edges","allMarkdownRemark","publicURL","file","setCategoryList","parsed","list","All","edge","forEach","Template","Introduction","CategoryList","PostList"],"sourceRoot":""}